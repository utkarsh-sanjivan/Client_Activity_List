{"version":3,"sources":["components/Header/index.js","components/TableDetails/index.js","utils/dateFormatter.js","components/ClientModal/index.js","container/ClientList/index.js","router.js","utils/configureFakeBackend.js","index.js"],"names":["IssueHeader","props","className","ContainerOutlined","TableDetails","style","marginTop","loading","dataSource","length","active","columns","pagination","bordered","getMonthString","month","getDateString","dateString","split","date","year","time","halfOfDay","slice","hour","toLowerCase","parseInt","moment","minute","ClientModal","tableColumns","title","dataIndex","key","render","value","record","start_time","end_time","startDateString","endDateString","startDate","endDate","diffHours","diff","calculateDuration","display","width","padding","FieldTimeOutlined","titleText","subTitleText","CloseOutlined","onClick","onCancel","closable","footer","client","activity_periods","ClientList","state","clientList","showModal","currentClient","fetch","method","then","res","setState","members","map","member","region","tz","reduce","accumulator","currentValue","area","currentMonth","months","currentYear","dateMonth","dateYear","monthEqual","yearEqual","diffDays","diffMinutes","formatDateString","this","real_name","visible","React","PureComponent","Routing","height","Header","basename","exact","path","component","realFetch","window","url","opts","Promise","resolve","reject","endsWith","body","TESTJSON","getClientActivityList","response","catch","error","handleRoute","configureFakeBackend","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1767a1f6.chunk.js","sourcesContent":["import React from 'react';\nimport { ContainerOutlined } from '@ant-design/icons';\nimport './style.css';\n\nconst IssueHeader = props => {\n  return (\n    <div className=\"client-page-header-wrapper\">\n      <ContainerOutlined className=\"client-bars-icon\"/>\n      <span className=\"client-page-header-title\">Client List</span>\n    </div>\n  );\n}\n\nexport default IssueHeader;\n","import React from 'react';\nimport { Table, Skeleton } from 'antd';\nimport './style.css';\n\nconst TableDetails = props => {\n  return (\n    <div style={{ marginTop: '25px' }}>\n      {props.loading && props.dataSource.length<31?\n        <Skeleton \n          loading={true}\n          active\n        />\n        : <Table \n        {...props}\n        dataSource={props.dataSource}\n        columns={props.columns}\n        pagination={false}\n        bordered\n        />}\n    </div>\n  );\n};\n\nexport default TableDetails;\n","import moment from 'moment';\n\nfunction getMonthString(month) {\n    const monthArr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return monthArr[month];\n}\n\nfunction getDateString(dateString) {\n    let [month, date, year, time] = dateString.split(' ');\n    if (time === '') time = dateString.split('  ')[1];\n    const halfOfDay = time.slice(-2);\n    time = time.slice(0,-2);\n    const hour = halfOfDay.toLowerCase() === 'am'? time.split(':')[0]: `${parseInt(time.split(':')[0])+12}`;\n    return moment().date(date).month(month).year(year).hour(hour).minute(time.split(':')[1]);\n}\n\nexport function formatDateString(dateString) {\n    const date = getDateString(dateString);\n    const currentMonth = moment().months();\n    const currentYear = moment().year();\n    const dateMonth = date.months();    \n    const dateYear = date.year();   \n    const monthEqual = currentMonth === dateMonth;\n    const yearEqual = currentYear === dateYear;\n    if (!yearEqual) return `on ${date.date()} ${getMonthString(dateMonth)} ${dateYear}`;\n    else if (yearEqual && !monthEqual) return `on ${date.date()} ${getMonthString(dateMonth)}`;\n    else if (yearEqual && monthEqual) {\n        const diffDays = moment().diff(date, 'days');\n        if (diffDays === 0) {\n            const diffHours = moment().diff(date, 'hour');\n            if (diffHours === 0) {\n                const diffMinutes = moment().diff(date, 'minutes');\n                if (diffMinutes === 0) return ' just now';\n                else return ` ${diffMinutes} ${diffMinutes === 1? 'minute': 'minutes'} ago`;\n            } else return ` ${diffHours} ${diffHours === 1? 'hour': 'hours'} ago`;\n        } else return ` ${diffDays} ${diffDays === 1? 'day': 'days'} ago`; \n    }\n}\n\nexport function calculateDuration (startDateString, endDateString) {\n    const startDate = getDateString(startDateString);\n    const endDate = getDateString(endDateString);\n    const diffHours = endDate.diff(startDate, 'hour');\n    if (diffHours === 0) {\n        return `${endDate.diff(startDate, 'minutes')} minutes`;\n    } else {\n        return `${diffHours} hours`;\n    }\n}\n","import React from 'react';\nimport { Modal } from 'antd';\nimport TableDetails from '../TableDetails/index';\nimport { CloseOutlined, FieldTimeOutlined } from '@ant-design/icons';\nimport { calculateDuration } from '../../utils/dateFormatter';\nimport './style.css';\n\nconst ClientModal = props => {\n    const tableColumns = [\n        {\n            title: <div className=\"client-list-header\">Start Time</div>,\n            dataIndex: 'start_time',\n            key: 'start_time',\n            render: (value, record) => (\n                <div className=\"client-start-time-column\">{value || ''}</div>\n            ),\n        },\n        {\n            title: <div className=\"client-list-header\">End Time</div>,\n            dataIndex: 'end_time',\n            key: 'end_time',\n            render: (value, record) => (\n                <div className=\"client-end-time-column\">{value || ''}</div>\n            ),\n        },\n        {\n            title: <div className=\"client-list-header\">Duration</div>,\n            dataIndex: 'duration',\n            key: 'duration',\n            render: (value, record) => (\n                <div className=\"client-duration-column\">{record.start_time && record.end_time? calculateDuration(record.start_time, record.end_time): ''}</div>\n            ),\n        },\n    ];\n    return (\n        <Modal\n            {...props}\n            title={\n                <div style={{ display: 'flex' }}>\n                    <div style={{ width: '10%', padding: '10px 0px 0px 10px' }}>\n                        <FieldTimeOutlined className=\"timeline-icon\"/>\n                    </div>\n                    <div style={{ width: '80%' }}>\n                        <div className=\"client-modal-title\">{props.titleText}</div>\n                        <div className=\"client-modal-sub-title\">{props.subTitleText}</div>\n                    </div>\n                    <div style={{ width: '10%' }}>\n                        <CloseOutlined \n                            className=\"close-icon\"\n                            onClick={() => props.onCancel()}\n                        />\n                    </div>\n                </div>\n            }\n            closable={false}\n            footer={null}\n        >\n            <TableDetails \n                width={600}\n                dataSource={props.client.activity_periods || []}\n                columns={tableColumns}\n            />\n        </Modal>\n    );\n};\n\nexport default ClientModal;\n","import React from 'react';\nimport TableDetails from '../../components/TableDetails';\nimport ClientModal from '../../components/ClientModal';\nimport { formatDateString } from '../../utils/dateFormatter';\nimport './style.css';\n\nclass ClientList extends React.PureComponent {\n  constructor (props) {\n    super(props);\n    this.state = {\n      clientList: [],\n      showModal: false,\n      currentClient: {},\n    };\n  }\n\n  componentDidMount () {\n    fetch(`http://localhost:3000/getClientActivityList`, { method: 'GET', }).then(res => {\n      debugger;\n      this.setState({ clientList: res.members.map(member => (\n        {\n          ...member,\n          region: member.tz.split('/')[0].split('_').reduce((accumulator, currentValue) => accumulator + ' ' + currentValue),\n          area: member.tz.split('/')[1].split('_').reduce((accumulator, currentValue) => accumulator + ' ' + currentValue),\n        }))\n      });\n    });\n  }\n\n  render () {\n    const tableColumns = [\n      {\n        title: <div className=\"client-list-header\">Name</div>,\n        dataIndex: 'real_name',\n        width: '300px',\n        key: 'name',\n        render: (value, record) => (\n          <div className=\"client-name-column\" onClick={() => this.setState({ showModal: true, currentClient: record })}>{value}</div>\n        ),\n      },\n      {\n        title: <div className=\"client-list-header\">Region</div>,\n        dataIndex: 'region',\n        key: 'region',\n        render: (value, record) => (\n          <div className=\"client-region-column\">{value}</div>\n        ),\n      },\n      {\n        title: <div className=\"client-list-header\">Area</div>,\n        dataIndex: 'area',\n        key: 'area',\n        render: (value, record) => (\n          <div className=\"client-area-column\">{value}</div>\n        ),\n      },\n      {\n        title: <div className=\"client-list-header\">Last Active</div>,\n        dataIndex: 'id',\n        key: 'last_active',\n        render: (value, record) => (\n          <div className=\"client-last-active-column\">{formatDateString(record.activity_periods[record.activity_periods.length-1].start_time)}</div>\n        ),\n      },\n    ];\n    return (\n      <div className=\"client-list-wrapper\">\n        <TableDetails \n          dataSource={this.state.clientList}\n          columns={tableColumns}\n        />\n        <ClientModal\n          titleText={this.state.currentClient.real_name}\n          subTitleText={`from ${this.state.currentClient.region}, ${this.state.currentClient.area}`}\n          visible={this.state.showModal}\n          client={this.state.currentClient}\n          onCancel={() => this.setState({ showModal: false })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default  ClientList;\n","import React from 'react'\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport Header from './components/Header/index';\nimport ClientList from './container/ClientList/index';\n\nconst Routing = props => (\n  <div style={{ height: '100%' }}>\n    <Header />\n    <HashRouter basename='/'>\n      <Switch>\n        <Route exact path=\"/\" component={ClientList} />\n        <Route exact path=\"*\" component={ClientList} />\n      </Switch>\n    </HashRouter>\n  </div>\n)\n\nexport default Routing;\n","import TESTJSON from './TEST JSON.json';\n\nexport function configureFakeBackend() {\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        const { method } = opts;\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            handleRoute();\n\n            function handleRoute() {\n                switch (true) {\n                    case url.endsWith('/getClientActivityList') && method === 'GET':\n                        return getClientActivityList();\n                    default:\n                        return realFetch(url, opts)\n                            .then(response => resolve(response))\n                            .catch(error => reject(error));\n                }\n            }\n\n            // route functions\n            function getClientActivityList() {\n                return ok(TESTJSON);\n            }\n\n            // helper functions\n            function ok(body) {\n                resolve(body);\n            }\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './router';\nimport './index.css';\nimport { configureFakeBackend } from './utils/configureFakeBackend';\n\nconfigureFakeBackend();\nReactDOM.render(\n  <Router />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}